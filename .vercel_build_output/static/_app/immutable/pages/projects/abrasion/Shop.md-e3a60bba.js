import{S as w,i as A,s as C,D as y,x as D,y as T,z as U,A as B,B as E,r as N,p as P,C as R,V as I,e as h,t as v,k as q,c,a as _,h as b,d,m as O,g as p,G as f,n as Z}from"../../../chunks/index-db76da04.js";import{D as j}from"../../../chunks/_document-9de51a6d.js";function z(u){let e,o,n,l,a,s,r,m,g;return{c(){e=h("h2"),o=v("Upgrades"),n=q(),l=h("p"),a=v("In the shop the player should be able to buy upgrades that increase their damage, health and more."),s=q(),r=h("blockquote"),m=h("p"),g=v(`[!NOTE] Removing the shop?
I have considered removing the shop in favour of a discovery based upgrade system. I could run both at the same time, kind of like a Zelda game. Allowing the player to purchase health and damage upgrades, yet discovering more ability based upgrades.`)},l(t){e=c(t,"H2",{});var i=_(e);o=b(i,"Upgrades"),i.forEach(d),n=O(t),l=c(t,"P",{});var x=_(l);a=b(x,"In the shop the player should be able to buy upgrades that increase their damage, health and more."),x.forEach(d),s=O(t),r=c(t,"BLOCKQUOTE",{});var $=_(r);m=c($,"P",{});var k=_(m);g=b(k,`[!NOTE] Removing the shop?
I have considered removing the shop in favour of a discovery based upgrade system. I could run both at the same time, kind of like a Zelda game. Allowing the player to purchase health and damage upgrades, yet discovering more ability based upgrades.`),k.forEach(d),$.forEach(d)},m(t,i){p(t,e,i),f(e,o),p(t,n,i),p(t,l,i),f(l,a),p(t,s,i),p(t,r,i),f(r,m),f(m,g)},p:Z,d(t){t&&d(e),t&&d(n),t&&d(l),t&&d(s),t&&d(r)}}}function G(u){let e,o;const n=[u[0],S];let l={$$slots:{default:[z]},$$scope:{ctx:u}};for(let a=0;a<n.length;a+=1)l=y(l,n[a]);return e=new j({props:l}),{c(){D(e.$$.fragment)},l(a){T(e.$$.fragment,a)},m(a,s){U(e,a,s),o=!0},p(a,[s]){const r=s&1?B(n,[s&1&&E(a[0]),s&0&&E(S)]):{};s&2&&(r.$$scope={dirty:s,ctx:a}),e.$set(r)},i(a){o||(N(e.$$.fragment,a),o=!0)},o(a){P(e.$$.fragment,a),o=!1},d(a){R(e,a)}}}const S={title:"Shop",tags:["abrasion"],layout:"document"};function H(u,e,o){return u.$$set=n=>{o(0,e=y(y({},e),I(n)))},e=I(e),[e]}class Q extends w{constructor(e){super(),A(this,e,H,G,C,{})}}export{Q as default,S as metadata};
